	<script src="../ace/ace.js"></script>
	<script src="../ace/ext-linking.js"></script>

	<div class="input-group" style="width:1200px">
		<input type="text" class="form-control" placeholder="索" style="height:38px" id="inpt" >
		<span class="input-group-btn">
			<button id="srch" class="btn btn-default" style="height:38px" onClick="srch()" ><i class="glyphicon glyphicon-search"> Find</i></button>
			<button id="home" class="btn btn-default" style="height:38px" onClick="home()" ><i class="glyphicon glyphicon-home"> Home</i></button>
			<button id="list" class="btn btn-default" style="height:38px" onClick="list()" ><i class="glyphicon glyphicon-list"> List</i></button>
			<button id="show" class="btn btn-default" style="height:38px" onClick="show()" ><i class="glyphicon glyphicon-eye-open"> Open</i></button>
			<button id="save" class="btn btn-default" style="height:38px" onClick="save()" ><i class="glyphicon glyphicon-cloud-upload"> Save</i></button>
			<button id="dele" class="btn btn-default" style="height:38px" onClick="dele()" ><i class="glyphicon glyphicon-trash"> Delete</i></button>
			<button id="crea" class="btn btn-default" style="height:38px" onClick="crea()" ><i class="glyphicon glyphicon-plus"> New</i></button>
			
			<button class="btn btn-default dropdown-toggle" data-toggle="dropdown" style="height:38px"><i class="glyphicon glyphicon-font"></i><span class="caret"></span></button>
			<ul class="dropdown-menu" id="font-size" >
				<li><a href="#" data-size="10">小</a></li>
				<li><a href="#" data-size="12">並</a></li>
				<li><a href="#" data-size="14">大</a></li>
			</ul>
		</span>
	</div>

<%- @thinktank.memos.edit( memoid: req.memoid, options: req.query ) -%>
<%- memo = @thinktank.memos[req.memoid] -%>

		<div id="editor" style="height:500px;width:1200px"><%= memo.content -%></div>
		
		
	<script>
		var curid = '<%= memo.memoid -%>';
		var base  = 'http://<%= req.tt_url -%>/memos';

		function howm( id = null, opt = {ext: 'howm'} ){
		  switch(true){
		  case id == null: return base + '/' + curid + '.' + opt.ext;
      case id == ''  : return base + '.' + opt.ext;
      default        : return base + '/' + id + '.' + opt.ext;
		  }
		}

		function show(e){ $.ajax( howm(), { type: "GET", success: function(dat){
		　editor.selectAll(); 
		　editor.removeLines(); 
		　editor.insert(dat); 
		　$('title').text(curid+'.howm'); } }); }
		function save(e){ $.ajax( howm(), { type: "PUT", data: { content: editor.getValue() }, success: function(e){ show(); } }); }
		function crea(e){ $.ajax( howm(''), { type: "POST", success: function(dat){ curid = dat; show(e); } }); }
		function home(e){ history.pushState(curid, null, howm()); curid = '0000-00-00-000000'; show(e); }
		function dele(e){ $.ajax( howm(), { type: "DELETE", success: function(dat){ home(e); } }) }
		function list(e){ $.ajax( howm(''), { type: "GET", success: function(dat){ editor.selectAll(); editor.removeLines(); editor.insert(dat); $('title').text('list'); } }); }
		function srch(e){ $.ajax( howm(''), { type: "GET", data: { keyword: $('#inpt').val() }, success: function(dat){
		    editor.selectAll(); editor.removeLines(); editor.insert(dat);
        $('title').text('list');
		   } }); }
		function click(data){
		  txt = data.token.value
		  if( /^http/.test( txt ) ) {
		    window.open( txt, "_blank" );
		  } else {
		    window.open( howm(txt.substr(0,17)+"/edit",{ext:'html'}), "_blank" );
		  }
		} 

		// history.pushState(curid, null, howm());

    var editor = ace.edit("editor");
		editor.$blockScrolling = Infinity;
    editor.setTheme("../ace/theme/idle_fingers");
		editor.getSession().setMode("../ace/mode/thinktank");
		editor.setKeyboardHandler("../ace/keyboard/emacs");

		editor.setFontSize(13);
		editor.getSession().setUseWrapMode(true);
		editor.getSession().setTabSize(2);
		editor.renderer.setShowGutter(false);

		editor.setOptions( { enableLinking: true } );
		
		editor.on("linkClick", click );

		$('#font-size').click(function(e) { editor.setFontSize($(e.target).data('size')); });
		$('#inpt').keydown( function(e){ if( e.which == 13 ){ srch(e); return false; } });

    editor.commands.addCommand({ bindKey: { win: 'Ctrl-E', mac: 'Command-E' }, exec: function(e){ $("#inpt").focus(); } });
		

</script>

	
</br>


